#+BEGIN_EXPORT html
---
layout: default
title: Software Engineering - Starter Web app 2
date: 2018-06-13
categories: software-engineering
parent: software-engineering-starter-web.org
---
#+END_EXPORT

#+title:    Software Engineering - Starter Web app 2
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-06-15 Fri>
#+language: en
#+tags:     tutorials software web
#+auto_id:  t

As a continuation of [[./software-engineering-starter-web.org][Starter Web App]], we'll be making our server respond with
some well formatted HTML. We want this so we can also test our web server with
a real web browser.

* why?
  :PROPERTIES:
  :CUSTOM_ID: why
  :END:
  If your server is already running, you can visit it in your browser by
  navigating to [[http://localhost:3000]]. You will see the "ohai" we added earlier
  in a very flat, ugly "page". It's not actually a page, but instead how the
  browser displays plain text content. We want to give back some actual HTML so
  we can make a pretty page with meaningful content.

* responding with html
  :PROPERTIES:
  :CUSTOM_ID: responding-with-html
  :END:

  Right now we're sending plain text over the wire with this expression:

#+begin_src js
res.send('ohai')
#+end_src

** variable names
   :PROPERTIES:
   :CUSTOM_ID: responding-with-html--variable-names
   :END:
  =res= is short for =response=. This a common convention in Express examples.
  In programming we can name our variables whatever we want. It's both a
  blessing and a curse. We want our variable names to be both meaningful and
  descriptive, but also terse enough that we can quickly understand what the
  purpose of the variable is and move on. Since we're writing a web server that
  is loaded full of handling requests and responses, we've chosen to abbreviate
  the name. Naming variables is sort of an art form, and not everyone agrees on
  all of the methods employed at naming them.

  I personally have moved to a place where I value the use of vaguer names
  rather more specific ones, and I'm okay with many reasonable abbreviations. I
  have other means of making my variables make more sense to me. You'll find
  your own way, and probably change it several times as you become more
  experienced.

** announcing the HTML
   :PROPERTIES:
   :CUSTOM_ID: responding-with-html--announcing-the-html
   :END:

   Both requests and responses have additional meta-data attached to them that
   helps facilitate communication. This meta data can indicate what language and
   locale your machine uses (and what it falls back to) as well as the format of
   the data you prefer. This meta data is expressed by something called HTTP
   headers, or just headers for short. A header looks like this:

#+begin_src
Header-Name: header-value
Other-Header-Name: other-header-value
#+end_src

   Additional headers are separated by line breaks, as shown above.

   Here, we're going to announce that we're sending HTML. We do this by setting
   the =Content-Type= header to =text/html=. This is a special value that we
   call a MIME type, which we can get into later. I checked Express's API docs
   for how to set headers, and this is what we need to do to indicate we're
   sending HTML back:

#+begin_src js
res.set('Content-Type', 'text/html')
#+end_src

   This needs to come _before_ we send the response body. Response headers must
   always come first. Afterwards the response body is included. Make sure your
   code now looks like this inside of your request handler:

#+begin_src js
res.set('Content-Type', 'text/html')
res.send('ohai')
#+end_src

   But we're not actually sending HTML yet. Let's change that now, and add a
   little more flavor to our site.

#+begin_src js
    res.set('Content-Type', 'text/html')
    res.send('\
  <html>\
    <body>\
      Welcome to the official site for <em>justified</em>\
      <strong>cat hatred</strong>.\
    </body>\
  </html>')
#+end_src

   Once you've added these changes, save the file and restart the server. Use
   control-c to kill the server when you're in the terminal tab that has the
   server running. Once that's done, you can start the server back up with =node
   server.js=.

   Now that the server is back up and running, navigate to [[http://localhost:3000]]
   in your browser of choice. If everything worked well, you should see
   something like this:

   [[file:./cat-hatred-html-01.png]]

** curl again
   :PROPERTIES:
   :CUSTOM_ID: responding-with-html--curl-again
   :END:

   Let's try this again with our prior tool, =curl=.

#+begin_src shell
curl http://localhost:3000
#+end_src

   You'll see something like what we typed in on the JavaScript side:

#+begin_src
  <html>       <body>         Welcome to the official site for <em>justified</em>         <strong>cat hatred</strong>.       </body>     </html>
#+end_src

   Well this is kind of hard to read. Imagine if we curled a real webpage with
   lots of stuff on it! There would be HTML everywhere, and it would be hard for
   us to see what's going on quickly. Let's add the capability to support
   multiple content types.

** the accept header
   :PROPERTIES:
   :CUSTOM_ID: responding-with-html--the-accept-header
   :END:

   When your web browser sends a request to a server, it will generally ask for
   HTML. It does that with an =Accept= _request_ header that looks like this:

#+begin_src
Accept: text/html
#+end_src

   In Express, we get to see the request the client sent to us. We can ask it
   for the accept header and make a decision based on that. The real [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept][=Accept=
   header]] can actually take a lot more than just a single MIME type. Express
   provides a helper for letting us ask if a particular type we're interested in
   is supported by what the browser sent, and that is a function called
   [[https://expressjs.com/en/api.html#req.accepts][=accepts=]] and it lives on the request object. We can ask if the request sent
   prefers =text/html= like this code that won't put in just yet:

#+begin_src js
req.accepts('text/html')
#+end_src

   We want to check if the client wants =text/html= and respond with actual
   HTML, otherwise we want to respond with plain text (=text/plain=). We'll
   update the message to match. The =text/plain= response should look like:

#+begin_src
Welcome to the official site for justified cat hatred.
#+end_src

** homework
   :PROPERTIES:
   :CUSTOM_ID: responding-with-html--homework
   :END:

   Instead of telling you what the code is here, I'm going to have you _figure
   it out yourself_. You've already done =if= statements in the past, so you
   have some basic logic flow. Now you're going to put it to work alongside the
   examples you have so far.

   To know if you got the homework here correct, I have a test I've created. Run
   this test, and it will tell you if you've satisfied the requirements we're
   looking for.

   You will need to install =pup= via =brew= in order to ensure that this script
   works. Copy the code block below and create a new file in your directory
   called =accept-test.sh=. =pup= processes HTML from the command line, and in
   this case is being used to ensure a uniform format of the HTML that's easy to
   compare.

   #+include: "~/dev/cat-hatred/accept-test.sh" src shell

   Once you've copied the file, run this to make it executable:

#+begin_src shell
chmod +x accept-test.sh
#+end_src

   To run the test, use:

#+begin_src shell
./accept-test.sh
#+end_src

*** tips
    :PROPERTIES:
    :CUSTOM_ID: responding-with-html--homework--tips
    :END:

    Don't forget to restart the server every time you save your changes!

* the next thing
  :PROPERTIES:
  :CUSTOM_ID: the-next-thing
  :END:

  After we get the homework test passing we can move onto the next thing, which
  will be making our server [[./software-engineering-starter-web-03.org][use dynamic data]].
