#+BEGIN_EXPORT html
---
layout: default
title: Killer Queen Streaming Guide
date: 2017-11-05
categories: killer-queen
---
#+END_EXPORT

#+TITLE:   Killer Queen Streaming Guide
#+AUTHOR:  Logan Barnett
#+EMAIL:   logustus@gmail.com
#+DATE:    <2017-11-05 Sun> 
#+TAGS:    killer-queen

#+TOC: headlines 3

* introduction
As part of trying to reduce the Portland scene's [[https://en.wikipedia.org/wiki/Bus_factor][bus number]] in regards to our
streaming setup I've recorded notes here as best I can. The dream is to have a
pretty foolproof setup that anyone mildly technically competent could apply to
their scene's cab. People can and should provide suggestions and corrections so
our community can better thrive. As a general policy I won't use a comment
system on this site because static hosting is awesome and also because
[[https://github.com/tessalt/echo-chamber-js][echo-chamber.js]] makes an excellent point. Feel free to contact me via email,
Twitter, or carrier pigeon for any improvements we can make here.

* improvements :noexport:
- [ ] Vectorize some of the graphics on the challonge imported view.
- [ ] Need network access somehow - wifi is currently not known but could be
  acquired via Javan Ivey or Dylan Higgins.
- [ ] Improve styling of the org exports (thus this page as well). Make them
  look more like as they are when edited in Emacs.
- [ ] Find out what changes Javan might have made to his clone of Matt's repo.
- [ ] Configure PlantUML diagrams to emit colors that are closer to the current
  Emacs theme.
- [ ] Include images for reference. I took many pictures.
- [ ] Specify when we're being generic vs specific in terms of hardware used vs.
  what's possible for use.

* challonge integration
Need access to Matt Wire's github repo that has a Rails server.
- [[https://github.com/boxofmattwire/kq-tournament][Matt Wire's repo]]
- [[https://github.com/LoganBarnett/kq-tournament][Logan's fork]]

Currently this repo isn't public.

** workarounds
Changes to the Challonge setup screws up the integration with the Rails server.
The Rails server at that point can't be used (or maybe the data would need to be
wiped). At that point, the server is basically useless to us (and we shouldn't
try troubleshooting the server during a streaming run if possible). Instead
there are text files which override the blue score, blue name, gold score, and
gold name. These appear to be sources in OBS. I haven't verified this yet.

* video flow
There is a 4 port splitter in cab. Two go to the two monitors. The overhead
monitor takes another slot, and the projector takes the final.

This is how our specific setup looks at PDX. Our stream box is the computer
running [[http://openbroadcaster.com][OBS]].

#+BEGIN_SRC plantuml :file video-flow.svg :java -Djava.awt.headless=true
skinparam monochrome reverse

[cab]
() splitter
[stream-box]
() "blue webcam" as bcam
() "gold webcam" as gcam
() "extra monitor" as auxout
() "blue monitor" as bmonitor
() "gold monitor" as gmonitor

[cab] --> splitter
bcam --> [stream-box]
splitter --> [stream-box]
splitter --> auxout
splitter --> gmonitor
splitter --> bmonitor
gcam --> [stream-box]

#+END_SRC

#+RESULTS:
[[file:video-flow.svg]]

* audio flow

Audio runs a weird loop. The mics wire into a mixer that runs to _another_
mixer. It's necessary for the headphones to get both the output of the computer
and the [[https://en.wikipedia.org/wiki/Sidetone][sidetone]] of the mics themselves. Sidetone is useful so speakers get a
sense that the system is picking up their voice, and also gives them a sense of
how loud they are being picked up.

#+BEGIN_SRC plantuml :file audio-loop.svg :java -Djava.awt.headless=true
skinparam monochrome reverse

interface "left mic" as lmic
interface "right mic" as rmic
interface "left headset" as lhead
interface "right headset" as rhead
interface "computer" as cpu

[thunderbolt-mixer]
[4-to-1-mixer]
[amp]

lmic --> [thunderbolt-mixer]
rmic --> [thunderbolt-mixer]

[thunderbolt-mixer] -> [4-to-1-mixer] : audio
[thunderbolt-mixer] --> cpu : thunderbolt
cpu --> [4-to-1-mixer] : headphone to input
[4-to-1-mixer] -> [amp] : output to input
[amp] --> lhead
[amp] --> rhead

#+END_SRC

#+RESULTS:
[[file:audio-loop.svg]]

This setup also provides lots of knobs to turn in terms of making sure the
announcers can turn up their own voices and also turn up the input of what they
are hearing from the game. This is done individually per the mixer and amp knobs
available per input/output (mixer and amp, respectively). _Turn the computer's
audio up to 100% and announcers can turn down as needed._

* pdx setup

This portion is specifically for the Portland setup at Ground Kontrol.
** facilities

Generally we need:
- A folding table
- A rug to cover the cables that run between the cabs and the table
- A power strip for all of the hardware
- A laptop with Thunderbolt support (moderately recent Macs have one or two).

Thunderbolt ports are physically compatible with Mini Display. Thunderbolt ports
can accept a Mini Display port, but it doesn't go the other way around.

A nice to have is the Thunderbolt display. It's a monitor that connections via -
wait for it - Thunderbolt. The display has a webcam, and is a rather large
screen that the commentators can easily share. It also leaves the computer free
for doing score management, enqueuing commercials or transitions, and managing
other parts of the production. Right now the Thunderbolt Display is on loan from
Day Logan.

** hardware
*** video
 HDMI is provided as an input source via a computer's Thunderbolt port (I need to
 check, but I'm pretty sure it's not mini display port). This runs from the video
 splitter to the laptop.

 #+ATTR_ORG: :width 400
 [[./assets/hdmi-to-thunderbolt-input-01.jpg]]

 When the device is working, you'll see a white light near the Thunderbolt
 connection.

 #+ATTR_ORG: :width 400
 [[file:assets/hdmi-to-thunderbolt-input-activated-01.jpg]]

*** audio

 Here's the amp as labeled in the diagram above:

 #+ATTR_ORG: :width 400
 [[./assets/audio-4-channel-amp-01.jpg]]

 We could use an image that's in focus...

 The 4 channel mixer:

 #+ATTR_ORG: :width 400
 [[./assets/audio-4-channel-mixer-01.jpg]]

 These devices appear to be very similar, but they are very different. Basically
 the mixer combines a series of inputs into a single output, and the amp splits a
 single input into a series of outputs.

 The mic mixer:

 #+ATTR_ORG: :width 400
 [[./assets/audio-mic-mixer-01.jpg]]

 The mics connect directly to this.

*** all together now

 #+ATTR_ORG: :width 400
 [[./assets/pdx-working-setup-01.jpg]]

 #+ATTR_ORG: :width 400
 [[./assets/pdx-working-setup-02.jpg]]

*** anti trip trick

 Ground Kontrol has seats that have these glowing strips on their corners and
 sides.

 #+ATTR_ORG: :width 400
 [[./assets/anti-cable-snag-trick-01.jpg]]

 These strips slide up a little bit. There's a small channel between the strip
 and the side of the seats. You can stuff some of the cables you need to run
 (such as the cables for the webcams) into this channel. Here we've stuffed the
 cables in there as best we can with the strip still up.

 #+ATTR_ORG: :width 400
 [[./assets/anti-cable-snag-trick-03.jpg]]

 Once the cables are in place, we can slide the strip back down, and it will hold
 the cables in place well enough to prevent feet from kicking the cables out or
 other snares from occurring. Here's the closed version with cables inserted:

 #+ATTR_ORG: :width 400
 [[./assets/anti-cable-snag-trick-04.jpg]]

** software

[[]]

*** challonge

The URL we use is in the format =kqpdx<MMDDYY>=, where =MM= is the number of the
month, =DD= the day of the month, and =YY= is the last two digits of the year.
If today's date is <2017-11-30 Thu>, the URL will be =kqpdx113017=.

[[./assets/challonge-name-01.png]]

Here's a list of things to clicky or type:

- Game: killer queen
- Single Stage Tournament
- Double Elimination
- 1-2 Matches
- Provide a list of participants
- Save and Continue

Example:

[[./assets/challonge-setup-01.png]]

*** kq-tournament

**** installation

Much of this is covered in the repo's =README.md=. This assumes running on MacOS
or Linux. Windows is probably doable, but that's beyond the scope of this
document short of someone else's contribution.

All of the instructions below assume you're running out of a terminal. On MacOS,
you can run =Terminal.app= for this.

Your environment needs the following:
- =rbenv= or =rvm= so you can get on Ruby 2.2.3.
- Postgres 9.4.5.0 (greater will probably work, but the =9= is likely important.
- The =bundler= gem installed globally.
- =git=
- A [[https://github.com][Github]] account for cloning the repository.
- Your public ssh key uploaded to github so you can clone the repository.

TODO: Open source the repository. Matt Wire has generously agreed to do this,
but it needs a little cleanup.

Clone the repository with git, and then =cd= into it.
#+BEGIN_EXAMPLE sh
git clone git@github.com:boxofmattwire/kq-tournament.git
cd kq-tournament
#+END_EXAMPLE

Here's an example =database.yml=. This should go in =config/database.yml=. Note
that =username= and =password= is left out. You can add these in if you have
accounts setup on your PostgreSQL server. The stock setup from Homebrew allows
local connections with no credentials.

#+name: kq-tournament-example-database-config
#+begin_src yaml :tangle yes :exports code
development:
  adapter: postgresql
  database: kqt_dev
  pool: 5
  timeout: 5000
  encoding: utf8

test:
  adapter: postgresql
  database: kqt_test
  pool: 5
  timeout: 5000
  encoding: utf8
#+end_src

This creates the file for you:

#+BEGIN_SRC sh :exports code :tangle yes :noweb yes
echo "
<<kq-tournament-example-database-config>>
" > config/database.yml
#+END_SRC

Install all of the gems the repo uses.

#+BEGIN_SRC sh
bundle install
#+END_SRC

Assuming a Homebrew installed postgres, the database server is started like so:
#+BEGIN_SRC sh
pg_ctl -D /usr/local/var/postgres start
#+END_SRC

It can be shut down with:
#+BEGIN_EXAMPLE sh
pg_ctl -D /usr/local/var/postgres stop
#+END_EXAMPLE

Create the initial database and its tables.
#+BEGIN_SRC sh
bundle exec rake db:create db:migrate
#+END_SRC

**** running
Once you have everything setup and the database server is running:
#+BEGIN_SRC sh
bundle exec rails server
#+END_SRC

**** stopping
Hold =Ctrl= and press =C=. This will return you to your normal shell prompt.

Then shut down the database server:
#+BEGIN_EXAMPLE sh
pg_ctl -D /usr/local/var/postgres stop
#+END_EXAMPLE

**** operating

*** OBS

[[https://obsproject.com][OBS]] (pronounced "awbz", short for Open Broadcaster Software) is what we use to
do streaming. Setting up streaming to Twitch is pretty simple with OBS. All
that's required is an API Key from Ground Kontrol. The API key is secret so it
shouldn't be published anywhere. This means you have to talk to staff or
ownership at Ground Kontrol in order to get it.

We still need to get a list of contacts that can provide the key.

**** overlays
***** chat
https://nightdev.com/kapchat/
***** video sources
I noticed my laptop struggling with the video sources when pulling in max
resolution. I switched them to 320x200 (or close to that), and it seems to work
much better. I suspect this is a throughput issue with 4 video sources coming in
to one little laptop. The cameras aren't really that high res and the area of
the screen they are displayed in is very small. There was no noticeable loss in
quality when switching to the lower res.

* troubleshooting
** If the input is not recognized on the computer's end
The known recipe (not fool proof, but most of the work):
1. Reboot the cabs with the computer's input (HDMI capture box).
2. Reintroduce other slots (monitors x2 and the projector).
* exporting notes :noexport:

I export this with the following:

#+BEGIN_SRC emacs-lisp
(org-to-jekyll)
#+END_SRC
